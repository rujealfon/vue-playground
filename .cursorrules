# Cursor AI Rules for Vue Playground

## Project Guidelines

### 🚫 NO BARREL FILES
- **NEVER** create or use index.ts files for re-exporting modules (barrel files)
- **ALWAYS** import directly from the source file
- **EXCEPTION**: The @/shared/components/ui folder is ignored from this rule

### Import Rules
- Use direct imports: `import Component from '@/features/auth/components/login-form.vue'`
- NOT: `import { Component } from '@/features/auth'`
- Be explicit about what you're importing and from where

### File Organization
- Each file should have a single, clear responsibility
- Use kebab-case for file names
- Use PascalCase for Vue component names
- Use camelCase for functions and variables

### Vue 3 Composition API
- Use `<script setup lang="ts">` syntax
- Prefer composables over mixins
- Use TypeScript for all new code

### TypeScript
- Use `type` instead of `interface` for object shapes
- Export types and interfaces explicitly
- Avoid `any` type - use proper typing

### Code Style
- Use ESLint and Prettier configurations
- Follow the existing code patterns
- Add JSDoc comments for complex functions

### Architecture
- Follow feature-based folder structure
- Keep components small and focused
- Use Pinia for state management
- Use Vue Router for navigation

### Error Handling
- Use try/catch for async operations
- Show user-friendly error messages
- Log errors for debugging

### Performance
- Use lazy loading for routes
- Minimize bundle size
- Optimize images and assets

### Testing
- Write unit tests for utilities
- Write component tests for complex components
- Use meaningful test descriptions

## Examples

### ✅ Good Import Examples
```typescript
// Direct component import
import LoginForm from '@/features/auth/components/login-form.vue'

// Direct service import
import { useAuthStore } from '@/features/auth/stores/auth.store'

// Direct type import
import type { User } from '@/shared/types/user'

// Direct utility import
import { cn } from '@/shared/utils/utils'
```

### ❌ Bad Import Examples
```typescript
// Barrel file imports (NEVER DO THIS)
import { LoginForm } from '@/features/auth'
import { User } from '@/shared/types'
import { cn } from '@/shared/utils'
```

### File Structure Example
```
src/
├── features/
│   ├── auth/
│   │   ├── components/
│   │   │   └── login-form.vue          ✅ Direct file
│   │   ├── stores/
│   │   │   └── auth.store.ts           ✅ Direct file
│   │   ├── types/
│   │   │   └── auth.ts                 ✅ Direct file
│   │   └── services/
│   │       └── auth.service.ts         ✅ Direct file
│   └── dashboard/
├── shared/
│   ├── components/
│   │   ├── ui/                         ⚠️  UI folder (ignored)
│   │   └── layouts/
│   │       ├── default-layout.vue      ✅ Direct file
│   │       └── dashboard-layout.vue    ✅ Direct file
│   ├── types/
│   │   ├── user.ts                     ✅ Direct file
│   │   ├── api.ts                      ✅ Direct file
│   │   └── ui.ts                       ✅ Direct file
│   ├── utils/
│   │   └── utils.ts                    ✅ Direct file
│   └── constants/
│       ├── messages.ts                 ✅ Direct file
│       ├── routes.ts                   ✅ Direct file
│       └── api.ts                      ✅ Direct file
```

## Remember
- Be explicit with imports
- Maintain clear file organization
- Follow TypeScript best practices
- Keep the codebase maintainable and readable